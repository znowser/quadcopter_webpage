<index>
  
  <!-- CODE SNIPPETS -->
  <snippets>
  <snippet name="Base Project">
    <template><![CDATA[      
      <!DOCTYPE html>
      <html>  
          <head>
              <title><%=projectTitle||"unnamed project"%></title>
              <script src="../CubicVR.js" type="text/javascript"></script>
              <script type="text/javascript">
                  function webGLStart(gl,canvas) {
                      // init and setup here
                      <% if (addMesh) { %>
                      var meshObject = new CubicVR.Mesh({
                          primitive: {
                              type: "sphere",
                              radius: 0.75,
                              lat: 32, // horizontal slices
                              lon: 32,  // vertical slices
                              //material: null,
                              //uv: null,
                          },
                          compile: true
                      });
                      <% } %>

                      <% if (buildScene) { %>
                      // build the scene
                      var scene = new CubicVR.Scene({
                          <% if (addCamera) { %>
                          camera: {
                              name: "the_camera",
                              fov: 60.0,
                              position: [1.0, 1.0, -1.0],
                              lookat: [0.0, 0.0, 0.0],
                              width: canvas.width,
                              height: canvas.height,
                          }, 
                          <% } %>
                          <% if (addLight) { %>
                          light: {
                              name: "the_light",
                              type: "point",
                              position: [1.0, 1.5, -2.0]
                          },
                          <% } %>
                          <% if (addMesh) { %>
                          sceneObject: {
                              name: "the_sphere",
                              position: [0.0, 0.0, 0.0],
                              mesh: meshObject,
                          },
                          <% } %>
                          <% if (skybox) { %>
                              skybox: new CubicVR.SkyBox({texture:"<%=skybox%>"})
                          <% } %>
                      });
                      <% } %>

                      <% if (buildScene) { %>
                      // Add the default scene camera to the resize list to update on browser resize
                      CubicVR.addResizeable(scene.getCamera());
                      <% } %>
                      
                      <% if (mvc) { %> 
                      // initialize a mouse view controller
                      mvc = new CubicVR.MouseViewController(canvas, scene.camera);
                      <% } %>
                      
                      <% if (addMainloop) { %>
                      // Start our main drawing loop, it provides a timer and the gl context as parameters
                      CubicVR.MainLoop(function(timer, gl) {
                          // perform any per-frame operations here
                          // perform any drawing operations here
                          scene.render();
                      });
                      <% } %>
                  }
              </script>
          </head>
          <body onload=CubicVR.start("auto",webGLStart)></body>
      </html>
      
      
      ]]>
    </template>
    <form>{
      projectTitle: {
          description: "Project Title",
          value: "unnamed project",
          type: "text"
      },
      buildScene: {
          description: "Build a Scene",
          type: "checkbox",
          value: 1
      },
      addCamera: {
          description: "Add a Camera",
          type: "checkbox",
          value: 1
      },
      addLight: {
          description: "Add a Light",
          type: "checkbox",
          value: 1
      },
      addMesh: {
          description: "Add a sphere Mesh to the scene",
          type: "checkbox",
          value: 1
      },
      skyboxOpt: {
          description: "Add sky box",
          type: "checkbox",
          value: 1
      },
      skybox: {
          description: "SkyBox texture",
          type:"skybox",
          value:"images/day_skybox.jpg",
          visibility: {
            skyboxOpt: [1]
          }
      },
      addMainloop: {
          description: "Setup the MainLoop",
          type: "checkbox",
          value: 1
      },
      mvc: {
          description: "Add mouse view controller",
          type: "checkbox",
          value: 1
      },
    }
    </form>
  </snippet>
 
 
 
 <snippet name="Mesh Primitive">
   <template><![CDATA[
     <% if (varname) { %>var <%=varname%> = new CubicVR.Mesh({ <% } else { %>{ <% } %>
         primitive: {
             type: "<%=type%>",
         <% if (size) { %>
             size: <%=size%>,
         <% } %>
         <% if (radius) { %>
             radius: <%=radius%>,
         <% } %>
         <% if (lat) { %>
             lat: <%=lat%>,
         <% } %>
         <% if (lon) { %>
             lon: <%=lon%>,
         <% } %>
         <% if (base) { %>
             base: <%=base%>,
         <% } %>
         <% if (height) { %>
             height: <%=height%>,
         <% } %>
         <% if (innerRadius) { %>
           innerRadius: <%=innerRadius%>,
         <% } %>
         <% if (outerRadius) { %>
           outerRadius: <%=outerRadius%>,
         <% } %>
            //material: null,
            //uv: null
         },
         compile: true
     }<% if (varname) { %>);<% } %>
   ]]>
   </template>
   <form>{
     varname: {
         description: "Variable Name",
         value: "",
         type: "text",
         required: false
     },
     type: {
        description: "Type",
        options: [
          "box",
          "plane",
          "sphere",
          "cylinder",
          "cone",
          "torus"
        ],
        type: "option",
        required: true
     },
     base: {
          description: "Base",
          value: "1.0",
          type: "float",
          required: true,
          visibility: {
             type: ["cone"]
          },
     },
     radius: {
         description: "Radius",
         value: "0.5",
         type: "float",
         visibility: {
            type: ["sphere","cylinder"]
         },
         required: true
     },
     height: {
          description: "Height",
          value: "1.0",
          type: "float",
          required: true,
          visibility: {
             type: ["cylinder","cone"]
          }
     },
     size: {
         description: "Size",
         value: "1.0",
         type: "float",
         visibility: {
            type: ["box","plane"]
         },
         required: true
     },
     innerRadius: {
         description: "Inner Radius",
         value: "0.5",
         type: "float",
         required: true,
         visibility: {
            type: ["torus"]
         }
     },
     outerRadius: {
         description: "Outer Radius",
         value: "0.75",
         type: "float",
         required: true,
         visibility: {
            type: ["torus"]
         }
     },     
     lat: {
         description: "Lat. Segments",
         value: "32",
         type: "uint",
         required: true,
         visibility: {
            type: ["torus","sphere"]
         }
     },
     lon: {
         description: "Lon. Segments",
         value: "32",
         type: "uint",
         required: true,
         visibility: {
            type: ["torus","cylinder","sphere"]
         }
     }
   }
   </form>
 </snippet>
  
  <snippet name="Material">
    <template><![CDATA[
      <% if (varname) { %>var <%=varname%> = new CubicVR.Material({ <% } else { %>{ <% } %>
          <% if (color) { %>
              color: [<%=color%>],
          <% } %>
          <% if (diffuse) { %>
              diffuse: [<%=diffuse%>],
          <% } %>
          <% if (specular) { %>
              specular: [<%=specular%>],
          <% } %>
      <% if (colorTexture||bumpTexture||normalTexture) { %>
          textures: {
          <% if (colorTexture) { %>
              color: "<%=colorTexture%>",
          <% } %>
          <% if (bumpTexture) { %>
              bump: "<%=bumpTexture%>",
          <% } %>
          <% if (normalTexture) { %>
              normal: "<%=normalTexture%>",
          <% } %>
          },
      <% } %>
      <% if (shininess) { %>
          shininess: <%=shininess%>,
      <% } %>
      }<% if (varname) { %>);<% } %>
    ]]>
    </template>
    <form>{
      varname: {
          description: "Variable Name",
          value: "",
          type: "text",
          required: false
      },
      color: {
          description: "Base Color",
          value: "1.0, 1.0, 1.0",
          type: "rgb",
          required: false
      },
      diffuse: {
          description: "Diffuse Color",
          value: "0.8, 0.8, 0.8",
          type: "rgb",
          required: false
      },
      specular: {
          description: "Specular Color",
          value: "",
          type: "rgb",
          required: false
      },
      colorTexture: {
          description: "Color Texture",
          value: "images/6583-diffuse.jpg",
          type: "image",
          required: false
      },
      bumpTexture: {
          description: "Bump Texture",
          value: "images/6583-bump.jpg",
          type: "image",
          required: false
      },
      normalTexture: {
          description: "Normal Texture",
          value: "images/6583-normal.jpg",
          type: "image",
          required: false
      },
      shininess: {
          description: "Shininess",
          value: "1.0",
          type: "float",
          required: false
      }
    }
    </form>
  </snippet>

  
  <snippet name="UV Mapper">
    <template><![CDATA[
      <% if (varname) { %>var <%=varname%> = new CubicVR.Material({ <% } else { %>{ <% } %>
          <% if (projectionMode) { %>
              projectionMode: "<%=projectionMode%>",
          <% } %>
          <% if (projectionAxis) { %>
              projectionAxis: "<%=projectionAxis%>",
          <% } %>
          <% if (wrapW) { %>
              wrapW: <%=wrapW%>,
          <% } %>
          <% if (wrapH) { %>
              wrapH: <%=wrapH%>,
          <% } %>
          <% if (position && position != "0, 0, 0") { %>
              position: [<%=position%>],
          <% } %>
          <% if (rotation && rotation != "0, 0, 0") { %>
              rotation: [<%=rotation%>],
          <% } %>
          <% if (scale && scale != "1, 1, 1") { %>
              scale: [<%=scale%>],
          <% } %>
      }<% if (varname) { %>);<% } %>
    ]]>
    </template>
    <form>{
      varname: {
          description: "Variable Name",
          value: "",
          type: "text",
      },
      projectionMode: {
          description: "Projection Mode",
          value: "",
          options: [
            "planar",
            "cubic",
            "cylindrical",
            "spherical"
          ],
          type: "option",
          required: false
      },
      wrapW: {
          description: "Width Wrap",
          value: "1.0",
          type: "float",
          required: false,
          visibility: {
            projectionMode: ["cylindrical","spherical"]
          }
      },
      wrapH: {
          description: "Height Wrap",
          value: "1.0",
          type: "float",
          required: false,
          visibility: {
            projectionMode: ["spherical"]
          }
      },
      projectionAxis: {
          description: "Projection Axis",
          value: "y",
          options: [
            "x",
            "y",
            "z"
          ],
          type: "option",
          required: false
      },
      position: {
          description: "Texture Position",
          value: "0, 0, 0",
          type: "xyz",
          required: false
      },
      rotation: {
          description: "Texture Rotation",
          value: "0, 0, 0",
          type: "xyz",
          required: false
      },
      scale: {
          description: "Texture Scale",
          value: "1, 1, 1",
          type: "xyz",
          required: false
      }
    }
    </form>
  </snippet>
  
  
  <snippet name="Scene Object">
    <template><![CDATA[
      <% if (varname) { %>var <%=varname%> = new CubicVR.SceneObject({ <% } else { %>{ <% } %>
              mesh: <%=meshName?meshName:"null"%>,
          <% if (position && position != "0, 0, 0") { %>
              position: [<%=position%>],
          <% } %>
          <% if (rotation && rotation != "0, 0, 0") { %>
              rotation: [<%=rotation%>],
          <% } %>
          <% if (scale && scale != "1, 1, 1") { %>
              scale: [<%=scale%>],
          <% } %>
      }<% if (varname) { %>);<% } %>
    ]]>
    </template>
    <form>{
      varname: {
          description: "Variable Name",
          value: "",
          type: "text",
      },
      meshName: {
          description: "Mesh Name",
          value: "null",
          type: "text",
          required: false
      },
      position: {
          description: "Position",
          value: "0, 0, 0",
          type: "xyz",
          required: false
      },
      rotation: {
          description: "Rotation",
          value: "0, 0, 0",
          type: "xyz",
          required: false
      },
      scale: {
          description: "Scale",
          value: "1, 1, 1",
          type: "xyz",
          required: false
      }
    }
    </form>
  </snippet>
  
  <snippet name="Light">
    <template><![CDATA[      
      <% if (varname) { %>var <%=varname%> = new CubicVR.Light({ <% } else { %>{ <% } %>
        type: "<%=type%>",
        <% if (mapRes) { %>
            mapRes: <%=mapRes%>,
        <% } %>
        <% if (projector) { %>
            projector: "<%=projector%>",
        <% } %>
        <% if (areaCeiling) { %>
            areaCeiling: <%=areaCeiling%>,
        <% } %>
        <% if (areaFloor) { %>
            areaFloor: <%=areaFloor%>,
        <% } %>
        <% if (areaAxisEW) { %>
            areaAxis: [<%=areaAxisEW%>,<%=areaAxisNS%>],
        <% } %>
        <% if (position) { %>
            position: [<%=position%>],
        <% } %>
        <% if (direction) { %>
            direction: [<%=direction%>],
        <% } %>
        <% if (target) { %>
            target: [<%=target%>],
        <% } %>
        <% if (intensity) { %>
            intensity: <%=intensity%>,
        <% } %>
        <% if (cutoff) { %>
            cutoff: <%=cutoff%>,
        <% } %>
        <% if (diffuse) { %>
            diffuse: [<%=diffuse%>],
        <% } %>
        <% if (specular) { %>
            specular: [<%=specular%>],
        <% } %>
      }<% if (varname) { %>);<% } %>
    ]]>
    </template>
    <form>{
      varname: {
          description: "Variable Name",
          value: "",
          type: "text",
      },
      type: {
        description: "Light Type",
        type:"option",
        options: [
          "point",
          "directional",
          "spot",
          "spot_shadow",
          "spot_shadow_projector",
          "area"
        ]
      },
      mapRes: {
          description: "Resolution",
          value: "1024",
          type: "option",
          options: [
            "512",
            "1024",
            "2048",
            "4096",
            "8192"
          ],
          visibility: {
            type: ["spot_shadow","spot_shadow_projector","area"]
          }
      },
      projector: {
          description: "Projection Image",
          value: "images/particle.jpg",
          type: "image",
          required: false,
          visibility: {
            type: ["spot_shadow_projector"]
          }
      },      
      direction: {
         description: "Direction",
         value: "0.8, -3, -2.6",
         type: "xyz",
         visibility: {
           type: ["directional"]
         }
      },
      areaCeiling: {
          description: "Ceiling Height",
          value: "20.0",
          type: "float",
          visibility: {
            type: ["area"]
          }
      },
      areaFloor: {
          description: "Floor Height",
          value: "-20.0",
          type: "float",
          visibility: {
            type: ["area"]
          }
      },
      areaAxisEW: {
          description: "Light angle E/W",
          value: "25.0",
          type: "float",
          visibility: {
            type: ["area"]
          }
      },
      areaAxisNS: {
          description: "Light angle N/S",
          value: "5.0",
          type: "float",
          visibility: {
            type: ["area"]
          }
      },      
      position: {
          description: "Light Position",
          value: "0, 2, 2",
          type: "xyz",
          visibility: {
            type: ["point","spot","spot_shadow","spot_shadow_projector"]
          }
      },
      target: {
          description: "Light Target",
          value: "0, 0, 0",
          type: "xyz",
          visibility: {
            type: ["spot","spot_shadow","spot_shadow_projector"]
          }
      },
      intensity: {
          description: "Intensity",
          value: "1.0",
          type: "float",
      },
      distance: {
          description: "Distance",
          value: "20",
          type: "float",
          visibility: {
            type: ["point","spot","spot_shadow","spot_shadow_projector"]
          }
      },
      cutoff: {
          description: "Cut-off angle",
          value: "60",
          type: "float",
          visibility: {
            type: ["spot","spot_shadow","spot_shadow_projector"]
          }
      },
      diffuse: {
          description: "Diffuse Color",
          value: "0.8, 0.8, 0.8",
          type: "rgb",
      },
      specular: {
          description: "Specular Color",
          value: "0.5, 0.5, 0.5",
          type: "rgb",
      }
    }
    </form>
  </snippet>
  
  <snippet name="Camera">
    <template><![CDATA[      
      <% if (varname) { %>var <%=varname%> = new CubicVR.Camera({ <% } else { %>{ <% } %>
          name: "<%=cameraName?cameraName:"unnamed"%>",
          fov: <%=fov?fov:60%>,
          position: [<%=position?position:"0, 1, 1"%>],
          lookat: [<%=lookat?lookat:"0, 0, 0"%>],
          width: canvas.width,
          height: canvas.height
      }<% if (varname) { %>);<% } %>
    ]]>
    </template>
    <form>{
      varname: {
          description: "Variable Name",
          value: "",
          type: "text",
      },
      cameraName: {
          description: "Camera Name",
          value: "camera",
          type: "text",
      },
      fov: {
          description: "Field of View",
          value: "60.0",
          type: "float",
      },
      position: {
          description: "Camera Position",
          value: "0, 1, 2",
          type: "xyz"
      },
      lookat: {
          description: "Camera Look-At",
          value: "0, 0, 0",
          type: "xyz"
      }
    }
    </form>
  </snippet>
 
 
  <snippet name="Cube Mesh from Arrays">
    <template><![CDATA[
      <% if (varname) { %>var <%=varname%> = new CubicVR.Mesh({ <% } else { %>{ <% } %>
        <% if (doUV) { %>
        material:{ 
          textures: {
            color: "images/1422-diffuse.jpg",
          },
          <% if (doColor) { %>
          colorMap: true
          <% } %>
        },
        <% } %>
        <% var hsize = (size||1)/2.0; %>
        points:[
          [ <%=hsize%>,-<%=hsize%>, <%=hsize%>],
          [ <%=hsize%>, <%=hsize%>, <%=hsize%>],
          [-<%=hsize%>, <%=hsize%>, <%=hsize%>],
          [-<%=hsize%>,-<%=hsize%>, <%=hsize%>],
          [ <%=hsize%>,-<%=hsize%>,-<%=hsize%>],
          [ <%=hsize%>, <%=hsize%>,-<%=hsize%>],
          [-<%=hsize%>, <%=hsize%>,-<%=hsize%>],
          [-<%=hsize%>,-<%=hsize%>,-<%=hsize%>]
        ],
        faces:[
          [0, 1, 2, 3], //front
          [7, 6, 5, 4], //back
          [4, 5, 1, 0], //right
          [5, 6, 2, 1], //top
          [6, 7, 3, 2], //left
          [7, 4, 0, 3]  //bottom
        ],
        <% if (doFaceNormals) { %>
        normals: [
          [ 0, 0, 1],
          [ 0, 0,-1],
          [ 1, 0, 0],
          [ 0, 1, 0],
          [-1, 0, 0],
          [ 0,-1, 0]
        ],
        <% } %>        
        <% if (doPointNormals) { %>
        normals: [
          [[ 0, 0, 1],[ 0, 0, 1],[ 0, 0, 1],[ 0, 0, 1]],
          [[ 0, 0,-1],[ 0, 0,-1],[ 0, 0,-1],[ 0, 0,-1]],
          [[ 1, 0, 0],[ 1, 0, 0],[ 1, 0, 0],[ 1, 0, 0]],
          [[ 0, 1, 0],[ 0, 1, 0],[ 0, 1, 0],[ 0, 1, 0]],
          [[-1, 0, 0],[-1, 0, 0],[-1, 0, 0],[-1, 0, 0]],
          [[ 0,-1, 0],[ 0,-1, 0],[ 0,-1, 0],[ 0,-1, 0]]
        ], 
        <% } %>
        <% if (doUV) { %>
        uv:[
          [[0,1],[1,1],[1,0],[0,0]],
          [[0,1],[1,1],[1,0],[0,0]],
          [[0,1],[1,1],[1,0],[0,0]],
          [[0,1],[1,1],[1,0],[0,0]],
          [[0,1],[1,1],[1,0],[0,0]],
          [[0,1],[1,1],[1,0],[0,0]]
        ],
        <% } %>
        <% if (doColor) { %>
        color: [
          [[1,0,0],[0,1,0],[0,0,1],[1,1,1]],
          [[1,0,0],[0,1,0],[0,0,1],[1,1,1]],
          [[1,0,0],[0,1,0],[0,0,1],[1,1,1]],
          [[1,0,0],[0,1,0],[0,0,1],[1,1,1]],
          [[1,0,0],[0,1,0],[0,0,1],[1,1,1]],
          [[1,0,0],[0,1,0],[0,0,1],[1,1,1]]
        ],
        <% } %>
        compile:true
    }<% if (varname) { %>);<% } %>
    ]]>
    </template>
    <form>{
      varname: {
          description: "Variable Name",
          value: "",
          type: "text"
      },
      size: {
          description: "Size",
          value: "1.0",
          type: "float",
          required: true
      },
      doFaceNormals: {
          description: "Supply Face Normals",
          value: 0,
          type: "checkbox"
      },
      doPointNormals: {
          description: "Supply Point Normals",
          value: 0,
          type: "checkbox"
      },
      doUV: {
          description: "Supply UV Mapping",
          value: 0,
          type: "checkbox"
      },
      doColor: {
          description: "Supply Point Colors",
          value: 0,
          type: "checkbox"
      }
    }
    </form>
  </snippet>
  </snippets>  
  <!-- INPUT FORM GENERATOR -->
  <inputFormGenerator><![CDATA[
    <% if (template.title) { %>
    <div class="dataFormTitle"><%=template.title%><a href="javascript:closeSnippet()">&times;</a></div>
    <% } %>
    <%  var generator = template.generator;
        var dataform = template.form;

        var defaultImages = [
          "images/1422-diffuse.jpg", "images/1422-bump.jpg", "images/1422-normal.jpg",
          "images/2062-diffuse.jpg",
          "images/2282-diffuse.jpg", "images/2282-bump.jpg", "images/2282-normal.jpg",
          "images/2576-diffuse.jpg", "images/2576-bump.jpg", "images/2576-normal.jpg",
          "images/2886-diffuse.jpg", "images/2886-bump.jpg", "images/2886-normal.jpg", "images/2886-specstrength.jpg",
          "images/3524-diffuse.jpg", "images/3524-bump.jpg", "images/3524-normal.jpg", "images/3524-metallic.jpg", 
          "images/4734-diffuse.jpg", "images/4734-bump.jpg", "images/4734-normal.jpg", "images/5352-bump.jpg",
          "images/5352-diffuse.jpg", "images/5352-normal.jpg", "images/5352-specstrength.jpg",
          "images/6583-diffuse.jpg", "images/6583-bump.jpg", "images/6583-normal.jpg",
          "images/concrete3.jpg",
          "images/crate-alpha.jpg",
          "images/crate.jpg",
          "images/fence.jpg",
          "images/fence-alpha.jpg", "images/fence-bump.jpg", "images/fence-normal.jpg", "images/fence-reflect.jpg",
          "images/fract_reflections.jpg",
          "images/grass.jpg",
          "images/metal6.jpg",
          "images/particle.jpg",
          "images/sky.png",
          "images/target.png",
          "images/water.jpg"
        ];
        var skyBoxes = [
          "images/cubemap1.jpg",
          "images/day_skybox.jpg",
          "images/space_skybox.jpg"
        ];
        var imageListDepth = 1000;


        for (var elemName in dataform) {
          if (!dataform.hasOwnProperty(elemName)) continue;
          var dataElem = dataform[elemName];
          var elValue = dataElem.value||"";
          var elRequired = dataElem.required||false;      
          var emptyStr = "''";
          
          %>
          <div class="dataFormRow">
          <% if (dataElem.description && dataElem.type != "checkbox") { %>
            <div class="dataLabel" /><label for="<%=elemName%>"><%=dataElem.description%></label></div>
          <% } %>

          <div class="dataInput"><%
          switch (dataElem.type) {
            case "text": %>
              <input type="text" name="<%=elemName%>" id="dataForm_<%=elemName%>" value="<%=elValue%>" />
            <% break; 
            case "float": %>
              <input type="text" name="<%=elemName%>" id="dataForm_<%=elemName%>" value="<%=elValue%>" size="10"
              onchange="tools.validateFloat(this,this.parentNode)" />
              <label for="<%=elemName%>" id="<%=elemName%>_validate">&nbsp;Float</label>
            <% break; 
            case "int": %>
              <input type="text" name="<%=elemName%>" id="dataForm_<%=elemName%>" value="<%=elValue%>" size="10"
              onchange="tools.validateInt(this,this.parentNode)" />
              <label for="<%=elemName%>" id="<%=elemName%>_validate">&nbsp;Integer</label>
            <% break; 
            case "uint": %>
              <input type="text" name="<%=elemName%>" id="dataForm_<%=elemName%>" value="<%=elValue%>" size="10"
              onchange="tools.validateUInt(this,this.parentNode)" />
              <label for="<%=elemName%>" id="<%=elemName%>_validate">&nbsp;Unsigned Integer</label>
            <% break; 
            case "xyz": %>
              <input type="text" name="<%=elemName%>" id="dataForm_<%=elemName%>" value="<%=elValue%>" size="15" 
              onchange="tools.validatePosition(this,this.parentNode)" />
              <label for="<%=elemName%>" id="<%=elemName%>_validate">&nbsp;[X, Y, Z] Float</label>
            <% break;
              case "rgb": %>
              <input type="text" name="<%=elemName%>" id="dataForm_<%=elemName%>" value="<%=elValue%>" size="15"
               onchange="tools.validateColor(this,this.parentNode)" /><input type="button" value="&darr;" onchange="this.previousSibling.value = tools.parseColor(this.color_value)" class="color" color_value="<%=elValue%>" style="margin-left:5px" />
               <label for="<%=elemName%>" id="<%=elemName%>_validate">&nbsp;[R, G, B] Float 0.0 - 1.0</label>
            <% break;
            case "checkbox": %>
              <input type="checkbox" name="<%=elemName%>" id="dataForm_<%=elemName%>" value="1" <%=elValue?"checked":""%> style="margin-left:20px;" /><label for="<%=elemName%>"><%=dataElem.description%></label>
            <% break;
              case "image": 
              case "skybox":
                var imageList = (dataElem.type=="image")?defaultImages:skyBoxes;
               %>
               <input type="text" name="<%=elemName%>" value="<%=elValue%>" id="dataForm_<%=elemName%>" value="" size="30" onchange="tools.validateImage(this,'imagePickerWrapper_<%=elemName%>')" /><input style="margin-left:5px" type="button" value="&times;" onclick="this.previousSibling.value=<%=emptyStr%>; tools.validateImage(this.previousSibling,'imagePickerWrapper_<%=elemName%>')" >
               <div class="imagePickerWrapper" id="imagePickerWrapper_<%=elemName%>" <%=elValue?("style='background:url("+elValue+"); background-size:24px 24px'"):""%>>
               <div class="imagePicker" style="z-index:<%=(imageListDepth--)%>" onclick="tools.imagePickerToggle(this)">
               <% for (var i in imageList) { %>
                 <img src="<%=imageList[i]%>" srcval="<%=imageList[i]%>" height="24" align="absmiddle" title="<%=imageList[i]%>" onclick="tools.imagePickerClick(this,'dataForm_<%=elemName%>',event)">
               <%  } %>
               </div>
             </div>
              <% break; 
               case "option":
                 var optionList = (dataElem.options);
                %>
                <select name="<%=elemName%>" id="dataForm_<%=elemName%>" value="" size="1" onchange="tools.validateSelect(this)">
                <% for (var opt in optionList) { %>
                  <option value="<%=optionList[opt]%>"><%=optionList[opt]%></option>
                <% } %>
                </select>
               <% break;
          } 

          if (elRequired) { %>
            <span class="required">*</span>
          <% } %>
      </div>
    </div>
    <% } %>
    <div style="clear:both" class="dataSubmit"><input type="button" id="dataSubmitButton" class="dataSubmit" value="Create" /></div>
  ]]>
  </inputFormGenerator>
  
  <!-- Sample Projects -->
  <samples>
    <sample name="Mozilla Festival Slideshow">./mozfest2012/mozfest.html</sample>
    <sample name="Cube with no scene">./basic/cube.html</sample>
    <sample name="Primitives">./basic/basic_primitives.html</sample>
    <sample name="Cube with material per-face">./basic/cube_multimaterial.html</sample>
    <sample name="Cube with scene">./basic/cube_scene.html</sample>
    <sample name="Scene with view control">./basic/cube_viewcontrol.html</sample>
    <sample name="Landscape basic usage">./basic/landscape.html</sample>
    <sample name="Torus via primitive lathe">./basic/lathe_torus.html</sample>
    <sample name="Advanced materials">./basic/materials.html</sample>
    <sample name="Material instances">./basic/material_instances.html</sample>
    <sample name="Texture U,V offset">./basic/material_uvoffset.html</sample>
    <sample name="Sphere U,V Mapping">./basic/sphere_map.html</sample>
    <sample name="Multiple Cameras">./camera/multi_camera.html</sample>
    <sample name="Render-to-texture">./camera/renderscenetexture.html</sample>
    <sample name="COLLADA duck">./collada/collada_duck.html</sample>
    <sample name="COLLADA sketch-up">./collada/sketchup.html</sample>
    <sample name="COLLADA wall-smash">./collada/wall_smash.html</sample>
    <sample name="COLLADA wall-smash (camera attached)">./collada/wall_smash_cam_attach.html</sample>
    <sample name="CustomShader basic">./custom_shader/basic_test.html</sample>
    <sample name="CustomShader noise">./custom_shader/noise.html</sample>
    <sample name="Definition files">./definitions/definitions.html</sample>
    <sample name="Definition files XML">./definitions/definitions_xml.html</sample>
    <sample name="Definition files: Scene">./definitions/definitions_scene.html</sample>
    <sample name="Definition files: Scene XML">./definitions/definitions_scene_xml.html</sample>
    <sample name="Event Tick">./events/event_tick.html</sample>
    <sample name="FPS Demo">./fps_demo/level1.html</sample>
    <sample name="GML 2D Graffiti">./gml/GMLDraw2D.html</sample>
    <sample name="GML 3D Graffiti">./gml/GMLDraw3D.html</sample>
    <sample name="GPU Fluid Shader">./gpu_fluid/wavepool_blockers.html</sample>
    <sample name="Instancing CubicVR">./instancing/index.html</sample>
    <sample name="2D Layout Test">./layout/layout_test.html</sample>
    <sample name="Mesh via arrays">./mesh_build/cube_arrays.html</sample>
    <sample name="Motion based animation">./motion/cube_animate.html</sample>
    <sample name="Mozilla Joystick Test">./moz_joystick/fps_control_test.html</sample>
    <sample name="PDF.js Gallery">./pdf/pdf_gallery.html</sample>
    <sample name="Physics: Basic test">./physics/physics_test.html</sample>
    <sample name="Physics: Compound objects">./physics/physics_compound.html</sample>
    <sample name="Physics: Grappling test">./physics/physics_grapple_event.html</sample>
    <sample name="Physics: Heightfield">./physics/physics_heightfield.html</sample>
    <sample name="Physics: Mesh">./physics/physics_mesh.html</sample>
    <sample name="Physics: Static mesh">./physics/physics_mesh_static.html</sample>
    <sample name="Physics: Shape types">./physics/physics_multishape.html</sample>
    <sample name="Physics: Pickables">./physics/physics_pickable.html</sample>
    <sample name="Physics: Stress test">./physics/physics_stress.html</sample>
    <sample name="Physics: Vehicle">./physics/physics_vehicle.html</sample>
    <sample name="Physics: Vehicle on Heightfield">./physics/physics_vehicle_heightfield.html</sample>
    <sample name="Physics: Vehicle on Heightfield (truck)">./physics/physics_vehicle_truck_heightfield.html</sample>
    <sample name="Physics: Zero-gravity">./physics/physics_zerog.html</sample>
    <sample name="Physics: Zero-gravity Constraints">./physics/physics_zerog_tether.html</sample>
    <sample name="Pickables: Test">./pickables/pickables.html</sample>
    <sample name="Pickables: Test2">./pickables/pickables2.html</sample>
    <sample name="Pickables: Project / UnProject">./pickables/project_unproject.html</sample>
    <sample name="Point mode">./pointMode/pointMode.html</sample>
    <sample name="Point mode (subdivision)">./pointMode/pointModeSubdivide.html</sample>
    <sample name="Particle Emitter">./point_sprite/ParticleEmitter.html</sample>
    <sample name="Particle Waterfall">./point_sprite/ParticleWaterfall.html</sample>
    <sample name="Point Sprites">./point_sprite/PointSprite.html</sample>
    <sample name="Tesselation">./polygon/tessellate.html</sample>
    <sample name="Shadows with alpha textures">./shadows/alphamap_shadows.html</sample>
    <sample name="Shadows with attached lights">./shadows/alphamap_shadows_attach.html</sample>
    <sample name="Shadows with attached projector light">./shadows/alphamap_shadows_projector.html</sample>
    <sample name="Shadows via Area light">./shadows/arealight.html</sample>
    <sample name="Sky Box">./skybox/skybox.html</sample>
    <sample name="Subdivision: Beveled cube">./subdivision/beveled_cube.html</sample>
    <sample name="Subdivision: Catmull-clark">./subdivision/catmull-clark.html</sample>
    <sample name="Subdivision: Remove internals">./subdivision/remove_internals.html</sample>
    <sample name="Subdivision: COLLADA wall smash">./subdivision/wall_smash.html</sample>
    <sample name="Texture: Text">./text/text.html</sample>
    <sample name="MainLoop">./timer/MainLoop.html</sample>
    <sample name="Timer">./timer/TimerTest.html</sample>
    <sample name="Dynamic VBO: Wave pool">./vbo_dynamic/wave_pool.html</sample>
    <sample name="Dynamic VBO: Wobbly cube">./vbo_dynamic/wobbly_cube.html</sample>
    <sample name="Morphing">./vbo_morph/vbo_morph.html</sample>
    <sample name="Morphing instances">./vbo_morph/vbo_morph_offset.html</sample>
    <sample name="Vehicle Physics Demo">./vehicle_physics_demo/stunt_track1.html</sample>
    <sample name="Wireframe: Global">./wireframe/wireframe_global.html</sample>
    <sample name="Wireframe: Local">./wireframe/wireframe_local.html</sample>
    <sample name="Wireframe: Primitives">./wireframe/wireframe_primitives.html</sample>
  </samples>
  
  <!-- DEFAULT PROJECT -->  
  <defaultproject><![CDATA[<!DOCTYPE html>
<html>
  
  <head>
    <meta charset='utf-8'>
    <title>CubicVR.js Demo</title>
    <script type='text/javascript' src="../CubicVR.js"></script>
    <script type='text/javascript'>
      function webGLStart(gl,canvas) {
        // Add a sphere to mesh, size 1.0
        // Apply material and UV parameters
        var sphereMesh = new CubicVR.Mesh({
          primitive: {
            type: "sphere",
            size: 1.0,
            lat: 64,
            lon: 64,
            material: {
              textures: {
                color: "images/6583-diffuse.jpg",
                bump: "images/6583-bump.jpg",
                normal: "images/6583-normal.jpg"
              },
              specular: [0.5,0.5,0.5],
              diffuse: [0.7,0.7,0.7],
              shininess: 0.3
            },
            uv: {
              projectionMode: "spherical",
              scale: [2, 2, 2],
              projectionAxis: "y",
              wrapW: 5,
              wrapH: 5
            }
          },
          compile: true
        });

        // New scene with our canvas dimensions and 
        // default camera with FOV 80
        var scene = new CubicVR.Scene({
          camera: {
            width: canvas.width, 
            height: canvas.height, 
            fov: 65,
            position: [1, 1, 1],
            target: [0, 0, 0]            
          },
          lights: [{
            type: "directional",
            specular: [1, 1, 1],
            direction: [0.8, -3, -2.6]
          }],
          sceneObjects: [{
            name: "sphere",
            mesh: sphereMesh
          }]          
        });

        // initialize a mouse view controller
        mvc = new CubicVR.MouseViewController(canvas, scene.camera);

        // Add our scene to the window resize list
        CubicVR.addResizeable(scene);

        // Start our main drawing loop, it provides a timer 
        // and the gl context as parameters
        CubicVR.MainLoop(function(timer, gl) {
          scene.render();
        });
      }
    </script>
  </head>
  
  <body onLoad="CubicVR.start('auto',webGLStart);"></body>
  
</html>]]>
  </defaultproject>
</index>